?deSolve
getNamespaceExports("ODEnetwork")
str(out)
out
plot(x)
?plot
?sobol
?morris
plot(x)
head(X1)
?sobol2002
?sobol2007
?sobol2002
?sobol2002
y
?sensitivity
FHNmod
?source
L
LVmod
pot
timesNum
X1
head(X1)
pars
x
x
LVpars
x=LVpars
times
pot
pot = 1
pot=c(0, 1)
pot=1
mod
x=(1,2)
x=c(1,2)
params
LVpars
x=LVpars
pot=1
State
yini
z
dglFun
dglFun(x, pot)
x
dglFun(1:2, pot)
dglFun(1:2, 1)
dglFun(matrix(1:2, ncol = 2), pot)
mod
x
x %x% 1:3
X <- matrix(1:60, ncol = 6)
X
X <- matrix(sample(1:60, size = 60), ncol = 6)
X
pot
x
colnames(X) <- names(x)
x
 X <- matrix(sample(1:60, size = 60), ncol = 6)
 X <- matrix(sample(1:60, size = 60), ncol = 5)
colnames(X) <- names(x)
X
pars
X
mod
X
x
X
X <- X / 100
X
X[,5] <- X[, 5] *50
X
X[,5] <- X[, 5] *2
X
X
dglFun(X[, 1:2], pot)
times
i=1
X1
k
head(X1)
  X1 <- data.frame(matrix(runif(k * n), nrow = n))
i
res
times
timesNum
trafo
S
n=50
T
stop()
S
S
i=1
S
res
res$S
pars
S
T
n=500
  for(i in 1:timesNum) {
    res <- sobol2007(model = modFun, X1, X2, pot = times[i])
    S[, i] <- c(times[i], res$S[, 1])
    T[, i] <- c(times[i], res$T[, 1])
  }
S
T
res
S
MinMaxS
MinMaxT
S
i=2
i=3
S
res
?legend
ODEsobol <- function(mod = LVmod,
                     pars = c("rIng", "rGrow", "rMort", "assEff", "K"),
                     yini = LVyini,
                     times = seq(1, 100, 5),
                     seed = 2015,
                     n = 1000,
                     trafo = function(Y) rowSums(Y^2)) {

  ##### Plausibilitaet #################################################
  assertNumeric(yini)

  ##### Vorarbeiten ####################################################
  # Anzahl Parameter:
  k <- length(pars)
  # Anzahl Outputgroessen:
  z <- length(yini)
  # Anzahl Zeitpunkte von Interesse:
  timesNum <- length(times)
  # Umformen DGL-Modell, sodass fuer sobol2007()-Argument model passend
  modFun <- function(X, pot) {
    # X   - (nxk)-Matrix
    # pot - point of time
    colnames(X) <- pars
    res <-
      t(apply(X, 1, function(x)
              ode(yini, times = c(0, pot), mod, parms = x)[2, 2:(z+1)]))
    # Transformation der Output-Variablen nach IR:
    trafo(res)
  }

  ##### Sensitivitaet ##################################################
  X1 <- data.frame(matrix(runif(k * n), nrow = n))
  X2 <- data.frame(matrix(runif(k * n), nrow = n))
  colnames(X1) <- colnames(X2) <- pars
  # Listen der Sensitivitaetsindizes (Haupteffekt, total) zu den
  # interessierenden Zeitpunkten:
  S <- T <- matrix(nrow = 1 + k, ncol = timesNum)
  # Durchlaufe alle Zeitpunkte und bestimme die Sensitivitaet:
  for(i in 1:timesNum) {
    res <- sobol2007(model = modFun, X1, X2, pot = times[i])
    S[, i] <- c(times[i], res$S[, 1])
    T[, i] <- c(times[i], res$T[, 1])
  }
  rownames(S) <- rownames(T) <- c("time", pars)
  return(list(S = S, T = T))
}
res
res
plot.sobol(res)
?eval
eval(2 ^ 2 ^ 3)
mEx <- expression(2^2^3); mEx; 1 + eval(mEx)
eval({ xx <- pi; xx^2}) ; xx
2^3
2^8
res
str(res)
FHNmod
FHNpars
FHNres <- res
ls()
OSmod
y
X1
y
LVmod
pot=1
mod
mod=LVmod
parms = LVparms
x = LVini
x = LVyini
yini = x
x <- x * 1.005
names(x) <- pars
pars
x
system.time(LVres <- ODEsobol(n = 20))
?clusterExport
n=10
S
T
S
STForPot(1)
i=1
timesNum
sapply(1:timesNum, STForPot)
sapply(1:timesNum, STForPot)
str(res)
res
z
k
times
S
T
?checkmate
??checkmate
mod
mod
times = Inf
times
times
?all.equal
checkNull(times)
checkZero(times)
times = c(0:3)
set.seed(pi)
trafo <- function(x) 1
?stopifnot
trafo <- function(x) x
str(res)
class(res)
res
LVres
class(LVres)
times <- 1:5
S
T
res
class(res)
classes(res)
str(res)
?setClasses
str(setClasses(res, "sobolRes"))
sobolRes
res
res
rm(sobolRes)
sobolRes
res
str(res)
rm(sobolRes)
sobol.fun
OSmod
OSpars
OSyini
FHNpars
str(OSpars)
str(FHNpars)
type
?assertMatrix
type = 5
type <- "hhhd"
?plot
?stopf
type
type = 4
type = "m"
legendPos <- 4
legendPos <- "bla"
rm(list = ls())
?save
?ODEnetwork
pars
?append
?UseMethod
FHNres <- ODEsobol(mod = FHNmod,
                   pars = c("a", "b", "s"),
                   yini = FHNyini,
                   times = seq(1, 20, 0.2),
                   seed = 2015,
                   n = 100,
                   trafo = function(Y) rowSums(Y^2))
S
T
res
FHNres
res = FHNres
res$S
rm(list = ls())
?setClasses
FHNRes
FHNres
str(FHNres)
str(FHNres)
res
FHNres
my.t = 1
x
str(x)
res
res
ddd <- 736
ddd <- setClasses(ddd, "haha")
ddd
seed=2015
set.seed(2015)
res
mod = dglFun
mod
pars = c("erster", "zweiter")
yini = 1
times = t.cec
times = t.vec
times
r=100
Y
z
k
timesNum
modFun = dglFun
modFun
sapply(times, oneRun, xFun = xFun)
xFun
oneRun
oneRun(xFun, 1)
mod
pars
yini
times
r
trafo
mod = dglFun
mod
pot
pot = time[1]
pot = times[1]
mod
mod = function(X, pot) exp(X[, 1] * my.t) + X[, 2] * pot
modFun = mod
mod
sapply(times, oneRun, xFun = xFun)
res
rm(list=ls())
